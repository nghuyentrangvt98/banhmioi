// Code generated by ent, DO NOT EDIT.

package product

import (
	"entgo.io/ent/dialect/sql"
	"github.com/nghuyentrangvt98/banhmioi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDescription, v))
}

// ListPrice applies equality check predicate on the "list_price" field. It's identical to ListPriceEQ.
func ListPrice(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldListPrice, v))
}

// SalePrice applies equality check predicate on the "sale_price" field. It's identical to SalePriceEQ.
func SalePrice(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldSalePrice, v))
}

// StockQty applies equality check predicate on the "stock_qty" field. It's identical to StockQtyEQ.
func StockQty(v int32) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldStockQty, v))
}

// ProductURL applies equality check predicate on the "product_url" field. It's identical to ProductURLEQ.
func ProductURL(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductURL, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCategory, v))
}

// MeasurementUnit applies equality check predicate on the "measurement_unit" field. It's identical to MeasurementUnitEQ.
func MeasurementUnit(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldMeasurementUnit, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldDescription, v))
}

// ListPriceEQ applies the EQ predicate on the "list_price" field.
func ListPriceEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldListPrice, v))
}

// ListPriceNEQ applies the NEQ predicate on the "list_price" field.
func ListPriceNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldListPrice, v))
}

// ListPriceIn applies the In predicate on the "list_price" field.
func ListPriceIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldListPrice, vs...))
}

// ListPriceNotIn applies the NotIn predicate on the "list_price" field.
func ListPriceNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldListPrice, vs...))
}

// ListPriceGT applies the GT predicate on the "list_price" field.
func ListPriceGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldListPrice, v))
}

// ListPriceGTE applies the GTE predicate on the "list_price" field.
func ListPriceGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldListPrice, v))
}

// ListPriceLT applies the LT predicate on the "list_price" field.
func ListPriceLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldListPrice, v))
}

// ListPriceLTE applies the LTE predicate on the "list_price" field.
func ListPriceLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldListPrice, v))
}

// SalePriceEQ applies the EQ predicate on the "sale_price" field.
func SalePriceEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldSalePrice, v))
}

// SalePriceNEQ applies the NEQ predicate on the "sale_price" field.
func SalePriceNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldSalePrice, v))
}

// SalePriceIn applies the In predicate on the "sale_price" field.
func SalePriceIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldSalePrice, vs...))
}

// SalePriceNotIn applies the NotIn predicate on the "sale_price" field.
func SalePriceNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldSalePrice, vs...))
}

// SalePriceGT applies the GT predicate on the "sale_price" field.
func SalePriceGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldSalePrice, v))
}

// SalePriceGTE applies the GTE predicate on the "sale_price" field.
func SalePriceGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldSalePrice, v))
}

// SalePriceLT applies the LT predicate on the "sale_price" field.
func SalePriceLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldSalePrice, v))
}

// SalePriceLTE applies the LTE predicate on the "sale_price" field.
func SalePriceLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldSalePrice, v))
}

// StockQtyEQ applies the EQ predicate on the "stock_qty" field.
func StockQtyEQ(v int32) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldStockQty, v))
}

// StockQtyNEQ applies the NEQ predicate on the "stock_qty" field.
func StockQtyNEQ(v int32) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldStockQty, v))
}

// StockQtyIn applies the In predicate on the "stock_qty" field.
func StockQtyIn(vs ...int32) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldStockQty, vs...))
}

// StockQtyNotIn applies the NotIn predicate on the "stock_qty" field.
func StockQtyNotIn(vs ...int32) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldStockQty, vs...))
}

// StockQtyGT applies the GT predicate on the "stock_qty" field.
func StockQtyGT(v int32) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldStockQty, v))
}

// StockQtyGTE applies the GTE predicate on the "stock_qty" field.
func StockQtyGTE(v int32) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldStockQty, v))
}

// StockQtyLT applies the LT predicate on the "stock_qty" field.
func StockQtyLT(v int32) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldStockQty, v))
}

// StockQtyLTE applies the LTE predicate on the "stock_qty" field.
func StockQtyLTE(v int32) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldStockQty, v))
}

// ProductURLEQ applies the EQ predicate on the "product_url" field.
func ProductURLEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductURL, v))
}

// ProductURLNEQ applies the NEQ predicate on the "product_url" field.
func ProductURLNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldProductURL, v))
}

// ProductURLIn applies the In predicate on the "product_url" field.
func ProductURLIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldProductURL, vs...))
}

// ProductURLNotIn applies the NotIn predicate on the "product_url" field.
func ProductURLNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldProductURL, vs...))
}

// ProductURLGT applies the GT predicate on the "product_url" field.
func ProductURLGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldProductURL, v))
}

// ProductURLGTE applies the GTE predicate on the "product_url" field.
func ProductURLGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldProductURL, v))
}

// ProductURLLT applies the LT predicate on the "product_url" field.
func ProductURLLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldProductURL, v))
}

// ProductURLLTE applies the LTE predicate on the "product_url" field.
func ProductURLLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldProductURL, v))
}

// ProductURLContains applies the Contains predicate on the "product_url" field.
func ProductURLContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldProductURL, v))
}

// ProductURLHasPrefix applies the HasPrefix predicate on the "product_url" field.
func ProductURLHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldProductURL, v))
}

// ProductURLHasSuffix applies the HasSuffix predicate on the "product_url" field.
func ProductURLHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldProductURL, v))
}

// ProductURLEqualFold applies the EqualFold predicate on the "product_url" field.
func ProductURLEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldProductURL, v))
}

// ProductURLContainsFold applies the ContainsFold predicate on the "product_url" field.
func ProductURLContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldProductURL, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldCategory, v))
}

// MeasurementUnitEQ applies the EQ predicate on the "measurement_unit" field.
func MeasurementUnitEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldMeasurementUnit, v))
}

// MeasurementUnitNEQ applies the NEQ predicate on the "measurement_unit" field.
func MeasurementUnitNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldMeasurementUnit, v))
}

// MeasurementUnitIn applies the In predicate on the "measurement_unit" field.
func MeasurementUnitIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldMeasurementUnit, vs...))
}

// MeasurementUnitNotIn applies the NotIn predicate on the "measurement_unit" field.
func MeasurementUnitNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldMeasurementUnit, vs...))
}

// MeasurementUnitGT applies the GT predicate on the "measurement_unit" field.
func MeasurementUnitGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldMeasurementUnit, v))
}

// MeasurementUnitGTE applies the GTE predicate on the "measurement_unit" field.
func MeasurementUnitGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldMeasurementUnit, v))
}

// MeasurementUnitLT applies the LT predicate on the "measurement_unit" field.
func MeasurementUnitLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldMeasurementUnit, v))
}

// MeasurementUnitLTE applies the LTE predicate on the "measurement_unit" field.
func MeasurementUnitLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldMeasurementUnit, v))
}

// MeasurementUnitContains applies the Contains predicate on the "measurement_unit" field.
func MeasurementUnitContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldMeasurementUnit, v))
}

// MeasurementUnitHasPrefix applies the HasPrefix predicate on the "measurement_unit" field.
func MeasurementUnitHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldMeasurementUnit, v))
}

// MeasurementUnitHasSuffix applies the HasSuffix predicate on the "measurement_unit" field.
func MeasurementUnitHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldMeasurementUnit, v))
}

// MeasurementUnitEqualFold applies the EqualFold predicate on the "measurement_unit" field.
func MeasurementUnitEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldMeasurementUnit, v))
}

// MeasurementUnitContainsFold applies the ContainsFold predicate on the "measurement_unit" field.
func MeasurementUnitContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldMeasurementUnit, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		p(s.Not())
	})
}
