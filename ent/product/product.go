// Code generated by ent, DO NOT EDIT.

package product

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldListPrice holds the string denoting the list_price field in the database.
	FieldListPrice = "list_price"
	// FieldSalePrice holds the string denoting the sale_price field in the database.
	FieldSalePrice = "sale_price"
	// FieldVariation holds the string denoting the variation field in the database.
	FieldVariation = "variation"
	// FieldStockQty holds the string denoting the stock_qty field in the database.
	FieldStockQty = "stock_qty"
	// FieldProductURL holds the string denoting the product_url field in the database.
	FieldProductURL = "product_url"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldMeasurementUnit holds the string denoting the measurement_unit field in the database.
	FieldMeasurementUnit = "measurement_unit"
	// Table holds the table name of the product in the database.
	Table = "products"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldListPrice,
	FieldSalePrice,
	FieldVariation,
	FieldStockQty,
	FieldProductURL,
	FieldCategory,
	FieldMeasurementUnit,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByListPrice orders the results by the list_price field.
func ByListPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldListPrice, opts...).ToFunc()
}

// BySalePrice orders the results by the sale_price field.
func BySalePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalePrice, opts...).ToFunc()
}

// ByStockQty orders the results by the stock_qty field.
func ByStockQty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStockQty, opts...).ToFunc()
}

// ByProductURL orders the results by the product_url field.
func ByProductURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductURL, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByMeasurementUnit orders the results by the measurement_unit field.
func ByMeasurementUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeasurementUnit, opts...).ToFunc()
}
