// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nghuyentrangvt98/banhmioi/ent/product"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ListPrice holds the value of the "list_price" field.
	ListPrice int64 `json:"list_price,omitempty"`
	// SalePrice holds the value of the "sale_price" field.
	SalePrice int64 `json:"sale_price,omitempty"`
	// Variation holds the value of the "variation" field.
	Variation map[string]interface{} `json:"variation,omitempty"`
	// StockQty holds the value of the "stock_qty" field.
	StockQty int32 `json:"stock_qty,omitempty"`
	// ProductURL holds the value of the "product_url" field.
	ProductURL string `json:"product_url,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// MeasurementUnit holds the value of the "measurement_unit" field.
	MeasurementUnit string `json:"measurement_unit,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldVariation:
			values[i] = new([]byte)
		case product.FieldID, product.FieldListPrice, product.FieldSalePrice, product.FieldStockQty:
			values[i] = new(sql.NullInt64)
		case product.FieldName, product.FieldDescription, product.FieldProductURL, product.FieldCategory, product.FieldMeasurementUnit:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case product.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case product.FieldListPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field list_price", values[i])
			} else if value.Valid {
				pr.ListPrice = value.Int64
			}
		case product.FieldSalePrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sale_price", values[i])
			} else if value.Valid {
				pr.SalePrice = value.Int64
			}
		case product.FieldVariation:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variation", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Variation); err != nil {
					return fmt.Errorf("unmarshal field variation: %w", err)
				}
			}
		case product.FieldStockQty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock_qty", values[i])
			} else if value.Valid {
				pr.StockQty = int32(value.Int64)
			}
		case product.FieldProductURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_url", values[i])
			} else if value.Valid {
				pr.ProductURL = value.String
			}
		case product.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pr.Category = value.String
			}
		case product.FieldMeasurementUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field measurement_unit", values[i])
			} else if value.Valid {
				pr.MeasurementUnit = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (pr *Product) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("list_price=")
	builder.WriteString(fmt.Sprintf("%v", pr.ListPrice))
	builder.WriteString(", ")
	builder.WriteString("sale_price=")
	builder.WriteString(fmt.Sprintf("%v", pr.SalePrice))
	builder.WriteString(", ")
	builder.WriteString("variation=")
	builder.WriteString(fmt.Sprintf("%v", pr.Variation))
	builder.WriteString(", ")
	builder.WriteString("stock_qty=")
	builder.WriteString(fmt.Sprintf("%v", pr.StockQty))
	builder.WriteString(", ")
	builder.WriteString("product_url=")
	builder.WriteString(pr.ProductURL)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pr.Category)
	builder.WriteString(", ")
	builder.WriteString("measurement_unit=")
	builder.WriteString(pr.MeasurementUnit)
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product
