// Code generated by ent, DO NOT EDIT.

package news

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the news type in the database.
	Label = "news"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSubtitle holds the string denoting the subtitle field in the database.
	FieldSubtitle = "subtitle"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldProductURL holds the string denoting the product_url field in the database.
	FieldProductURL = "product_url"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// Table holds the table name of the news in the database.
	Table = "news"
)

// Columns holds all SQL columns for news fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldSubtitle,
	FieldContent,
	FieldAuthor,
	FieldCreatedAt,
	FieldCategory,
	FieldProductURL,
	FieldImageURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the News queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySubtitle orders the results by the subtitle field.
func BySubtitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubtitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByProductURL orders the results by the product_url field.
func ByProductURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductURL, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}
