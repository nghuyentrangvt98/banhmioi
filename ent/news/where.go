// Code generated by ent, DO NOT EDIT.

package news

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nghuyentrangvt98/banhmioi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.News {
	return predicate.News(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.News {
	return predicate.News(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.News {
	return predicate.News(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.News {
	return predicate.News(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.News {
	return predicate.News(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.News {
	return predicate.News(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.News {
	return predicate.News(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldTitle, v))
}

// Subtitle applies equality check predicate on the "subtitle" field. It's identical to SubtitleEQ.
func Subtitle(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldSubtitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldContent, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldAuthor, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.News {
	return predicate.News(sql.FieldEQ(FieldCreatedAt, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldCategory, v))
}

// ProductURL applies equality check predicate on the "product_url" field. It's identical to ProductURLEQ.
func ProductURL(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldProductURL, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldImageURL, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldTitle, v))
}

// SubtitleEQ applies the EQ predicate on the "subtitle" field.
func SubtitleEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldSubtitle, v))
}

// SubtitleNEQ applies the NEQ predicate on the "subtitle" field.
func SubtitleNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldSubtitle, v))
}

// SubtitleIn applies the In predicate on the "subtitle" field.
func SubtitleIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldSubtitle, vs...))
}

// SubtitleNotIn applies the NotIn predicate on the "subtitle" field.
func SubtitleNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldSubtitle, vs...))
}

// SubtitleGT applies the GT predicate on the "subtitle" field.
func SubtitleGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldSubtitle, v))
}

// SubtitleGTE applies the GTE predicate on the "subtitle" field.
func SubtitleGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldSubtitle, v))
}

// SubtitleLT applies the LT predicate on the "subtitle" field.
func SubtitleLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldSubtitle, v))
}

// SubtitleLTE applies the LTE predicate on the "subtitle" field.
func SubtitleLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldSubtitle, v))
}

// SubtitleContains applies the Contains predicate on the "subtitle" field.
func SubtitleContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldSubtitle, v))
}

// SubtitleHasPrefix applies the HasPrefix predicate on the "subtitle" field.
func SubtitleHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldSubtitle, v))
}

// SubtitleHasSuffix applies the HasSuffix predicate on the "subtitle" field.
func SubtitleHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldSubtitle, v))
}

// SubtitleIsNil applies the IsNil predicate on the "subtitle" field.
func SubtitleIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldSubtitle))
}

// SubtitleNotNil applies the NotNil predicate on the "subtitle" field.
func SubtitleNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldSubtitle))
}

// SubtitleEqualFold applies the EqualFold predicate on the "subtitle" field.
func SubtitleEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldSubtitle, v))
}

// SubtitleContainsFold applies the ContainsFold predicate on the "subtitle" field.
func SubtitleContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldSubtitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldContent, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldAuthor, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.News {
	return predicate.News(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.News {
	return predicate.News(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.News {
	return predicate.News(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.News {
	return predicate.News(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.News {
	return predicate.News(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.News {
	return predicate.News(sql.FieldLTE(FieldCreatedAt, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldCategory, v))
}

// ProductURLEQ applies the EQ predicate on the "product_url" field.
func ProductURLEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldProductURL, v))
}

// ProductURLNEQ applies the NEQ predicate on the "product_url" field.
func ProductURLNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldProductURL, v))
}

// ProductURLIn applies the In predicate on the "product_url" field.
func ProductURLIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldProductURL, vs...))
}

// ProductURLNotIn applies the NotIn predicate on the "product_url" field.
func ProductURLNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldProductURL, vs...))
}

// ProductURLGT applies the GT predicate on the "product_url" field.
func ProductURLGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldProductURL, v))
}

// ProductURLGTE applies the GTE predicate on the "product_url" field.
func ProductURLGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldProductURL, v))
}

// ProductURLLT applies the LT predicate on the "product_url" field.
func ProductURLLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldProductURL, v))
}

// ProductURLLTE applies the LTE predicate on the "product_url" field.
func ProductURLLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldProductURL, v))
}

// ProductURLContains applies the Contains predicate on the "product_url" field.
func ProductURLContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldProductURL, v))
}

// ProductURLHasPrefix applies the HasPrefix predicate on the "product_url" field.
func ProductURLHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldProductURL, v))
}

// ProductURLHasSuffix applies the HasSuffix predicate on the "product_url" field.
func ProductURLHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldProductURL, v))
}

// ProductURLIsNil applies the IsNil predicate on the "product_url" field.
func ProductURLIsNil() predicate.News {
	return predicate.News(sql.FieldIsNull(FieldProductURL))
}

// ProductURLNotNil applies the NotNil predicate on the "product_url" field.
func ProductURLNotNil() predicate.News {
	return predicate.News(sql.FieldNotNull(FieldProductURL))
}

// ProductURLEqualFold applies the EqualFold predicate on the "product_url" field.
func ProductURLEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldProductURL, v))
}

// ProductURLContainsFold applies the ContainsFold predicate on the "product_url" field.
func ProductURLContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldProductURL, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.News {
	return predicate.News(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.News {
	return predicate.News(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.News {
	return predicate.News(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.News {
	return predicate.News(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.News {
	return predicate.News(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.News {
	return predicate.News(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.News {
	return predicate.News(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.News {
	return predicate.News(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.News {
	return predicate.News(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.News {
	return predicate.News(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.News {
	return predicate.News(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.News {
	return predicate.News(sql.FieldContainsFold(FieldImageURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.News) predicate.News {
	return predicate.News(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.News) predicate.News {
	return predicate.News(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.News) predicate.News {
	return predicate.News(func(s *sql.Selector) {
		p(s.Not())
	})
}
